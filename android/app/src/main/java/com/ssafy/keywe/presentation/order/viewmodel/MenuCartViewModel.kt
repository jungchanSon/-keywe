package com.ssafy.keywe.presentation.order.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.ssafy.keywe.data.ResponseResult
import com.ssafy.keywe.domain.order.MenuDetailModel
import com.ssafy.keywe.domain.order.OrderMenuItemModel
import com.ssafy.keywe.domain.order.OrderModel
import com.ssafy.keywe.domain.order.OrderOptionItemModel
import com.ssafy.keywe.domain.order.OrderRepository
import com.ssafy.keywe.domain.order.OrderResponseModel
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

@HiltViewModel
class MenuCartViewModel @Inject constructor(private val repository: OrderRepository) : ViewModel() {

    data class CartItem(
        val id: Long,
        val menuId: Long,
        val name: String,
        val price: Int,
        val quantity: Int,
        val image: String?,
        val size: String,
        val temperature: String,
        val extraOptions: Map<Long, Pair<String, Int>>,
    )

    val sizePriceMap = mapOf("Tall" to 0, "Grande" to 500, "Venti" to 1000)

    private val _cartItems = MutableStateFlow<List<CartItem>>(emptyList())
    val cartItems: StateFlow<List<CartItem>> = _cartItems.asStateFlow()

    private val _isDeleteDialogOpen = MutableStateFlow(false)
    val isDeleteDialogOpen: StateFlow<Boolean> = _isDeleteDialogOpen.asStateFlow()

    private val _isCompleteOrder = MutableStateFlow(false)
    val isCompleteOrder: StateFlow<Boolean> = _isCompleteOrder.asStateFlow()

    private val _isCompleteOrderGoHome = MutableStateFlow(false)
    val isCompleteOrderGoHome: StateFlow<Boolean> = _isCompleteOrderGoHome.asStateFlow()

    private val _selectedCartItem = MutableStateFlow<CartItem?>(null)
    val selectedCartItem: StateFlow<CartItem?> = _selectedCartItem.asStateFlow()

    private val _selectedDetailMenu = MutableStateFlow<MenuDetailModel?>(null)
    val selectedDetailMenu: StateFlow<MenuDetailModel?> = _selectedDetailMenu.asStateFlow()

    fun fetchMenuDetailById(id: Long, storeId: Long): MenuDetailModel? {
        Timber.tag("Fetch Menu").d(":$id")

        viewModelScope.launch {
            when (val result = repository.getDetailMenu(id, storeId)) {
                is ResponseResult.Success -> {
                    val menuDetail = result.data
                    _selectedDetailMenu.value = menuDetail
                    Log.d("MenuCartViewModel", "getDetailMenu Í≤∞Í≥º: $menuDetail")
                    menuDetail.options.forEach { option ->
                        Timber.tag("ÏòµÏÖò Ï†ïÎ≥¥")
                            .d("ÏòµÏÖòÎ™Ö: ${option.optionName}, ÏòµÏÖò ID: ${option.optionId}")
                    }

                }

                is ResponseResult.ServerError -> {
                    println("ÏÑúÎ≤Ñ ÏóêÎü¨: ${result.status}")  // ÏÑúÎ≤Ñ Ïò§Î•ò Î°úÍ∑∏
                }

                is ResponseResult.Exception -> {
                    println("ÏòàÏô∏ Î∞úÏÉù: ${result.e.message}")  // ÏòàÏô∏ Î°úÍ∑∏
                }
            }
        }
        Timber.tag("selectDetailMenu Î©îÎâ¥:").d("${selectedDetailMenu.value}")
        return selectedDetailMenu.value
    }

    fun addToCart(
        menuId: Long,
        size: String,
        temperature: String,
        selectedOptions: Map<Long, Int>,
        totalPrice: Int,
        storeId: Long,
    ) {
        viewModelScope.launch {
            Log.d(
                "MenuCartViewModel",
                "addToCart: menuId: $menuId, size: $size, temperature: $temperature"
            )
            _selectedDetailMenu.value = null

            fetchMenuDetailById(menuId, storeId)

            var retryCount = 0
            while (_selectedDetailMenu.value == null && retryCount < 6) {
                delay(500)
                retryCount++
            }

            val menuData = _selectedDetailMenu.value
            if (menuData == null) {
                Timber.tag("addToCart").e("Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞Í∞Ä nullÏûÖÎãàÎã§. menuId: $menuId")
                return@launch
            }
            Log.d(
                "MenuCartViewModel",
                "menuData = $menuData"
            )
            val sizeOptionId = menuData.options.flatMap { it.optionsValueGroup }
                .find { it.optionValue == size }?.optionValueId

            val temperatureOptionId = menuData.options.flatMap { it.optionsValueGroup }
                .find { it.optionValue == temperature }?.optionValueId

            Timber.tag("addToCart")
                .d("‚úÖ Ï∞æÏùÄ $size Ïùò sizeOptionId: $sizeOptionId, $temperature Ïùò temperatureOptionId: $temperatureOptionId")

            val updatedSelectedOptions = selectedOptions.toMutableMap()
            sizeOptionId?.let { updatedSelectedOptions[it] = 1 }
            temperatureOptionId?.let { updatedSelectedOptions[it] = 1 }

            val cartExtraOptions = updatedSelectedOptions.mapNotNull { (optionId, count) ->
                val optionModel = menuData.options.find { option ->
                    option.optionsValueGroup.any { it.optionValueId == optionId }
                }

                val optionType = optionModel?.optionType ?: "Unknown"
                val optionName = optionModel?.optionsValueGroup
                    ?.find { it.optionValueId == optionId }?.optionValue ?: "Unknown"

                // ‚úÖ "Extra" ÏòµÏÖòÎßå Ï†ÄÏû•
                if (optionType == "Extra") {
                    optionId to (optionName to count)
                } else {
                    null // "Extra"Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
                }
            }.toMap()

            val currentCart = _cartItems.value.toMutableList()

            val existingItemIndex = currentCart.indexOfFirst {
                it.menuId == menuData.menuId && it.name == menuData.menuName && it.size == size && it.temperature == temperature && it.extraOptions == cartExtraOptions
            }

            if (existingItemIndex != -1) {
                currentCart[existingItemIndex] = currentCart[existingItemIndex].copy(
                    quantity = currentCart[existingItemIndex].quantity + 1
                )
                Timber.tag("addToCart").d("‚úÖ Í∏∞Ï°¥ ÏïÑÏù¥ÌÖú ÏàòÎüâ Ï¶ùÍ∞Ä: ${currentCart[existingItemIndex]}")
            } else {
                val newId = (currentCart.maxOfOrNull { it.id } ?: 0) + 1

                currentCart.add(
                    CartItem(
                        id = newId,
                        menuId = menuData.menuId,
                        name = menuData.menuName,
                        price = totalPrice,
                        quantity = 1,
                        image = menuData.image,
                        size = size,
                        temperature = temperature,
                        extraOptions = cartExtraOptions
                    )
                )
            }

            // ‚úÖ ÏóÖÎç∞Ïù¥Ìä∏ Î∞òÏòÅ
            _cartItems.value = currentCart.toList()
            Timber.tag("addToCart").d("üõí ÏµúÏ¢Ö Ïû•Î∞îÍµ¨Îãà ÏÉÅÌÉú: ${_cartItems.value}")
        }
    }

    fun updateCartItem(
        cartItemId: Long,
        cartItemMenuId: Long,
        size: String,
        temperature: String,
        extraOptions: Map<Long, Int>,
        storeId: Long,
    ) {
        Timber.tag("updateCartItem")
            .d("updateCartItem Ìò∏Ï∂úÎê®: id=$cartItemId, menuId=$cartItemMenuId") // ‚úÖ Ìï®Ïàò Ìò∏Ï∂ú Î°úÍ∑∏ Ï∂îÍ∞Ä

        viewModelScope.launch {
            Timber.tag("updateCartItem").d("‚úÖ fetchMenuDetailById Ìò∏Ï∂ú Ï†Ñ")
            fetchMenuDetailById(cartItemMenuId, storeId)
            Timber.tag("updateCartItem").d("‚úÖ fetchMenuDetailById Ìò∏Ï∂ú ÌõÑ")

            var retryCount = 0
            while (selectedDetailMenu.value == null && retryCount < 6) {
                Timber.tag("updateCartItem").d("‚è≥ Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë... (retryCount: $retryCount)")
                delay(500)
                retryCount++
            }

            if (selectedDetailMenu.value == null) {
                Timber.tag("updateCartItem").e("‚ùå Î©îÎâ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. menuId: $cartItemMenuId")
                return@launch
            }

            Timber.tag("updateCartItem").d("‚úÖ Î©îÎâ¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò¥: ${selectedDetailMenu.value}")

            val menuDetail = selectedDetailMenu.value ?: return@launch

            val menuPrice = menuDetail.menuPrice
            val sizePrice = sizePriceMap[size] ?: 0

            val filteredExtraOptions = extraOptions.mapValues { (optionValueId, count) ->
                val optionModel = menuDetail.options.find { option ->
                    option.optionsValueGroup.any { it.optionValueId == optionValueId }
                }

                val optionType = optionModel?.optionType ?: "Unknown"
                val optionValue =
                    optionModel?.optionsValueGroup?.find { it.optionValueId == optionValueId }?.optionValue
                        ?: "Unknown"

                // ‚úÖ "Extra" ÏòµÏÖòÎßå ÌëúÏãú (Common ÏòµÏÖò Îì± Ï†úÏô∏)
                if (optionType == "Extra") {
                    optionValue to count
                } else {
                    "" to 0 // Common ÏòµÏÖò Îì±ÏùÄ ÌëúÏãúÌïòÏßÄ ÏïäÏùå
                }
            }

            val extraOptionPrice = filteredExtraOptions.entries.sumOf { (_, pair) ->
                val (optionValue, count) = pair
                val optionModel = menuDetail.options.find { option ->
                    option.optionsValueGroup.any { it.optionValue == optionValue }
                }

                val optionPrice = optionModel?.optionPrice ?: 0
                optionPrice * count
            }

            val newTotalPrice = menuPrice + sizePrice + extraOptionPrice

            _cartItems.update { currentCart ->
                Timber.tag("Cart Update").d("Í∏∞Ï°¥ Ïû•Î∞îÍµ¨Îãà: $currentCart")
                val existingItemIndex = currentCart.indexOfFirst {
                    it.menuId == cartItemMenuId && it.size == size && it.temperature == temperature && it.extraOptions == extraOptions && it.id != cartItemId
                }

                val updatedCart = currentCart.toMutableList()
                Timber.tag("Cart Update").d("ÏÉà Ïû•Î∞îÍµ¨Îãà: $updatedCart")

                if (existingItemIndex != -1) {
                    updatedCart[existingItemIndex] = updatedCart[existingItemIndex].copy(
                        quantity = updatedCart[existingItemIndex].quantity + 1
                    )
                    updatedCart.removeIf { it.id == cartItemId }
                } else {
                    updatedCart.replaceAll { cartItem ->


                        if (cartItem.id == cartItemId) {
                            cartItem.copy(
                                size = size,
                                temperature = temperature,
                                extraOptions = filteredExtraOptions,
                                price = newTotalPrice
                            )
                        } else {
                            cartItem
                        }
                    }
                }

                updatedCart
            }
        }
    }

    fun openDeleteDialog(cartItem: CartItem) {
        _selectedCartItem.value = cartItem
        _isDeleteDialogOpen.value = true
    }

    fun closeDeleteDialog() {
        _isDeleteDialogOpen.value = false
        _selectedCartItem.value = null
    }

    fun clearCart() {
        _cartItems.value = emptyList()
    }

    fun removeFromCart(cartItemId: Long) {
        _cartItems.update { currentCart ->
            val updatedCart = currentCart.filter { it.id != cartItemId }.toList()
            updatedCart
        }
        closeDeleteDialog()
    }

    fun updateCartQuantity(cartItemId: Long, newQuantity: Int) {
        _cartItems.update { currentCart ->
            currentCart.map { cartItem ->
                if (cartItem.id == cartItemId) {
                    cartItem.copy(quantity = newQuantity)
                } else {
                    cartItem
                }
            }
        }
    }

    private val _orderResponse = MutableStateFlow<OrderResponseModel?>(null)
    val orderResponse: StateFlow<OrderResponseModel?> = _orderResponse

    fun postOrder(orderModel: OrderModel, onResult: (Result<OrderResponseModel>) -> Unit) {
        viewModelScope.launch {
            Timber.tag("postOrder OrderModel ÌôïÏù∏").d("$orderModel")
            when (val result = repository.postOrder(orderModel)) {
                is ResponseResult.Success -> {
                    val responseBody = result.data
                    Timber.tag("postOrder").d("‚úÖ ÏõêÎ≥∏ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞: $responseBody")

                    // üìå ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ Îã®Ïàú Ïà´ÏûêÎùºÎ©¥ ÏßÅÏ†ë OrderResponseModelÎ°ú Î≥ÄÌôò
                    val parsedResponse = try {
                        OrderResponseModel(orderId = responseBody.orderId)
                    } catch (e: Exception) {
                        Timber.tag("postOrder").e("üö® ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïã§Ìå®: ${e.message}")
                        null
                    }

                    if (parsedResponse != null) {
                        _orderResponse.value = parsedResponse
                        Timber.tag("postOrder").d("‚úÖ Î≥ÄÌôòÎêú ÏùëÎãµ Îç∞Ïù¥ÌÑ∞: $parsedResponse")
                        _isCompleteOrder.value = true
                        onResult(Result.success(parsedResponse))
                    } else {
                        onResult(Result.failure(Exception("ÌååÏã± Ïã§Ìå®")))
                    }
                }

                is ResponseResult.ServerError -> {
                    Timber.tag("postOrder Ïã§Ìå®: ÏÑúÎ≤ÑÏóêÎü¨").d("${result.status}")
                }

                is ResponseResult.Exception -> {
                    Timber.tag("postOrder Ïã§Ìå®: ÏòàÏô∏").d("${result.e.message}")
                }
            }
        }
    }

    fun createOrderModel(phoneNumber: String): OrderModel {
        val menuList = _cartItems.value.map { cartItem ->
            OrderMenuItemModel(menuId = cartItem.menuId,
                menuCount = cartItem.quantity,
                optionList = cartItem.extraOptions.map { (optionValueId, pair) ->  // ‚úÖ ÏòµÏÖò ID Í∏∞Î∞ò
                    OrderOptionItemModel(
                        optionValueId = optionValueId, // ‚úÖ ÏòµÏÖò ID Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
                        optionCount = pair.second  // ‚úÖ ÏòµÏÖò Í∞úÏàò ÏÇ¨Ïö©
                    )
                })
        }

        Timber.tag("createOrderModel").d("ÏÉùÏÑ±Îêú Ï£ºÎ¨∏ Î™®Îç∏: $menuList")

        return OrderModel(
            phoneNumber = phoneNumber, menuList = menuList
        )
    }


    fun closeCompleteOrderDialog() {
        _isCompleteOrder.value = false
        _isCompleteOrderGoHome.value = false
        clearCart()
    }

}